
import datetime
import json
import re
import telebot
import sys
import threading
import telegram
sys.path.append('C:/Users/Professional/Desktop/diploma/botcalendar.py')
from telebot import apihelper
import botcalendar
from telebot import types
from datetimerange import DateTimeRange
from collections import namedtuple
from telegram import Update, ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, CallbackContext, CallbackQueryHandler

from elegram_bot_calendar_m import *
from dateutil.relativedelta import relativedelta
import db
import pandas as pd
from datetime import *

token = '6307067319:AAFViRxf6VvEpKu-CXxJhSpUgS3YJQzzMQU'
bot = telebot.TeleBot('6307067319:AAFViRxf6VvEpKu-CXxJhSpUgS3YJQzzMQU',num_threads=5)

all_target_descriptions = ['–û–∫—Å–∞–Ω–∞ –°–∞–º–æ–π–ª–æ–≤–∞', '–î–º–∏—Ç—Ä–∏–π –í–∞—Å–∏–ª—å–∫–æ–≤', '–ê–ª–µ–∫—Å–µ–π –ë–æ—á–∫–∞—Ä–µ–≤', '–ê–ª–µ–∫—Å–µ–π –í–∞–≤–∏–ª–æ–≤', '–ú–∞—Ä–∏—è –ì–æ–Ω—á–∞—Ä–æ–≤–∞']
user_data = {}
def get_user_data(user_id):
    if user_id not in user_data:
        user_data[user_id] = {
                'appointment_details': {
                    'data': '',
                    'time_service': '',
                    'selected_time': '',
                    'service': '',
                    'master': '',
                    'user_id': '0',
                    'user_nik': ''
                },
                'masterm': False,
                'datem': False,
                'servicem': False,
                'key_master':False,
                'rez':None,
                'msg':None,
                'b':None,
                'a':None,
                'kx':1,
                'name_cleint':None,
                'phone_client':None,
                'mas_month':False,
                'mas_year':False,
                'mas_day':False,
                'selected_time_slot_start':0,
                'selected_time_slot_end':0,
                'zanyat_rez':0,
                'new_client':None,
                'times':[]
            }
    return user_data[user_id]


names_to_numbers = {
    '–û–∫—Å–∞–Ω–∞ –°–∞–º–æ–π–ª–æ–≤–∞': 1,
    '–î–º–∏—Ç—Ä–∏–π –í–∞—Å–∏–ª—å–∫–æ–≤': 2,
    '–ê–ª–µ–∫—Å–µ–π –ë–æ—á–∫–∞—Ä–µ–≤': 3,
    '–ê–ª–µ–∫—Å–µ–π –í–∞–≤–∏–ª–æ–≤': 4,
    '–ú–∞—Ä–∏—è –ì–æ–Ω—á–∞—Ä–æ–≤–∞': 5
}


#–º–µ–Ω—é
def menu(chat_id, user_id):
    user_info = get_user_data(user_id)   
    markup = types.InlineKeyboardMarkup()
    if user_info['masterm'] ==False:
        
        btn21 = types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞",callback_data='master')
        markup.row(btn21)
    if user_info['datem'] ==False:
        
        btn22 = types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è",callback_data='date')
        markup.row(btn22)
    if user_info['servicem']== False:
       
        btn23 = types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É",callback_data='service')
        markup.row(btn23)
    if user_info['masterm'] == False or user_info['datem']== False or user_info['servicem']== False:
        bot.send_message(
            chat_id, text=("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Ç—Å–≤–∏–µ –Ω–∏–∂–µ üëá"), reply_markup=markup)
        

def startm(m):

    calendar, step = DetailedTelegramCalendar(calendar_id=2,locale='ru').build()
    bot.send_message(m.chat.id,
                     f"–í—ã–±–µ—Ä–∏—Ç–µ",
                     reply_markup=calendar)

    
@bot.callback_query_handler(func=DetailedTelegramCalendar.func(calendar_id=2))
def cal(c):
    result, key, step = DetailedTelegramCalendar(calendar_id=2, locale='ru').process(c.data)
    user_id = c.message.chat.id
    user_info = get_user_data(user_id)
    try:
        data = json.loads(key)
        inline_keyboard = data.get('inline_keyboard', [])
        index_of_double_arrow = None
        for row in inline_keyboard:
            for i, item in enumerate(row):
                if isinstance(item, dict) and item.get('text') == ">>":
                    index_of_double_arrow = (inline_keyboard.index(row), i)
                    break
            if index_of_double_arrow:
                break

        if index_of_double_arrow:
            row_index, col_index = index_of_double_arrow
            if col_index - 1 >= 0 and col_index - 1 < len(inline_keyboard[row_index]):
                next_item = inline_keyboard[row_index][col_index - 1]
                if isinstance(next_item, dict) and 'callback_data' in next_item:
                    callback_data_to_use = next_item['callback_data']            
                    pattern = r'cbcal_2_g_([my])_(\d{4})_(\d+)'
                    
                    match = re.search(pattern, callback_data_to_use)
                    if match:
                        identifier = match.group(1)
                        year = match.group(2)
                        if identifier == 'y':
                            resulty = year
                            if user_info['mas_month'] == False and user_info['mas_day']==False:
                                result = resulty
                        elif identifier == 'm':
                            month = match.group(3)
                            resultm = f"{year}-{month.zfill(2)}"
                            if user_info['mas_year'] == False and user_info['mas_day']==False:
                                result = resultm
                    else:
                        print("–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
                else:
                    print("–°–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'callback_data'")
            else:
                print("–°–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏")
        else:
            print("–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º '>>'")
    except json.JSONDecodeError:
        print("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON")
    except KeyError as e:
        print(f"–û—à–∏–±–∫–∞ –∫–ª—é—á–∞: {e}")
    except TypeError as e:
        print(f"–û—à–∏–±–∫–∞ —Ç–∏–ø–∞: {e}")

    if not result and key:
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ",
                              c.message.chat.id,
                              c.message.message_id,
                              reply_markup=key)
    if result:
        bot.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {result}",
                              c.message.chat.id,
                              c.message.message_id)
        
        
       
        result1=str(result)
        mas_id=db.get_master_id(db.get_master_name(int(c.message.chat.id)))
        get_cleint(c.message, result1,mas_id)

def get_cleint(message,date,m_id):
        chat_id = message.chat.id
        client_services = db.get_client_services_by_date(m_id, date) 
        if client_services:
            for service in client_services:
                    client_name,client_nik, client_phone,service_date, service_time, service_type, master_name = service
                    message_text = f"–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {client_name} ({client_nik})\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {client_phone}\n–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {service_type}\n–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: {service_date}\n–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: {service_time}"
                    bot.send_message(chat_id, message_text)
        else:
            bot.send_message(chat_id, f"–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π {date}.")




#–∑–∞–ø—É—Å–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è         
def start_calendar(m):
    today = date.today()
    next_month = today + relativedelta(months=2)
    max_date = next_month.replace(day=1) - relativedelta(days=1)
    calendar, step = WMonthTelegramCalendar(locale='ru', min_date=date.today(), max_date=max_date).build()
    bot.send_message(m.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ", reply_markup=calendar)

@bot.callback_query_handler(func=WMonthTelegramCalendar.func())
def cal(c):
    user_id = c.message.chat.id
    user_info = get_user_data(user_id)
    today = date.today()
    next_month = today + relativedelta(months=2)
    max_date = next_month.replace(day=1) - relativedelta(days=1)
    result, key, step = WMonthTelegramCalendar(locale='ru',min_date=date.today(),max_date=max_date).process(c.data)
    user_info['rez'] = result
    if not result and key:  
            bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å", c.message.chat.id, c.message.message_id, reply_markup=key) 
    elif result:
        result_m = str(result)
        parts = result_m.split('-')  
        month_day = parts[1] + '-' + parts[2]
        if user_info['masterm'] ==False:
            free_time_slots = botcalendar.calendar1.get_free_time_slots(botcalendar.calen, all_target_descriptions, result_m,user_info,user_info['appointment_details']['time_service'])
        elif user_info['masterm'] ==True:
            master_name = user_info['appointment_details']['master']    
            free_time_slots = botcalendar.calendar1.get_free_time_slots(botcalendar.calen, master_name, result_m,user_info,user_info['appointment_details']['time_service'])
        if free_time_slots == None:
            if not user_info['b']:
                bot.answer_callback_query(c.id)
                user_info['msg'] = bot.send_message(c.message.chat.id, text=f"–ù–∞ {month_day} –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.", reply_markup=types.InlineKeyboardMarkup(row_width=4))
                user_info['a'] =1
                user_info['b']=1
                bot.answer_callback_query(c.id)
            elif user_info['b']:
                try:
                     user_info['msg'] = bot.edit_message_text(f"–ù–∞ {month_day} –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.", c.message.chat.id, user_info['msg'].message_id,reply_markup=types.InlineKeyboardMarkup(row_width=4))
                except telebot.apihelper.ApiTelegramException as e:
                    print(f"Ignoring error: {e}")
        else:
            reply_markup = create_buttons_for_time_slots(free_time_slots) 
            if not user_info['a']:
                user_info['msg'] = bot.send_message(c.message.chat.id, text=f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è {month_day}", reply_markup=reply_markup)
                user_info['a'] =1
                bot.answer_callback_query(c.id)
            elif user_info['a']:
                try:
                    bot.answer_callback_query(c.id)
                    user_info['msg'] = bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è {month_day}", c.message.chat.id, user_info['msg'].message_id, reply_markup=reply_markup)
                    bot.answer_callback_query(c.id)
                except telebot.apihelper.ApiTelegramException as e:
                    print(f"Ignoring error: {e}")
            bot.answer_callback_query(c.id)
            bot.edit_message_reply_markup(c.message.chat.id, user_info['msg'].message_id, reply_markup=reply_markup)
            bot.answer_callback_query(c.id)

def create_buttons_for_time_slots(free_time_slots):
    markup = types.InlineKeyboardMarkup(row_width=4)  
    buttons = [types.InlineKeyboardButton(time_slot, callback_data=f"selected_time:{time_slot}") for time_slot in free_time_slots]    
    for i in range(0, len(buttons), 4):
        if i+3 < len(buttons):
            markup.row(*buttons[i:i+4])
        else:
            remaining_buttons = buttons[i:]
            markup.row(*remaining_buttons)
    return markup


def start_create_buttons_for_master():
    markup = types.InlineKeyboardMarkup(row_width=4)
    buttons = []
    current_time = datetime.strptime("11:00", "%H:%M")
    end_time = datetime.strptime("21:00", "%H:%M")

    while current_time <= end_time:
        buttons.append(types.InlineKeyboardButton(current_time.strftime("%H:%M"), callback_data=f"start_selected_time_master:{current_time.strftime('%H:%M')}"))
        current_time += timedelta(hours=1)
    for i in range(0, len(buttons), 4):
        if i+3 < len(buttons):
            markup.row(*buttons[i:i+4]) 
        else:
            remaining_buttons = buttons[i:]
            markup.row(*remaining_buttons)
    return markup 

def end_create_buttons_for_master():
    markup = types.InlineKeyboardMarkup(row_width=4)
    buttons = []
    current_time = datetime.strptime("11:00", "%H:%M")
    end_time = datetime.strptime("21:00", "%H:%M")

    while current_time <= end_time:
        buttons.append(types.InlineKeyboardButton(current_time.strftime("%H:%M"), callback_data=f"end_selected_time_master:{current_time.strftime('%H:%M')}"))
        current_time += timedelta(hours=1)

    for i in range(0, len(buttons), 4):
        if i+3 < len(buttons):
            markup.row(*buttons[i:i+4])  
        else:
            remaining_buttons = buttons[i:]
            markup.row(*remaining_buttons)
    return markup 

#–∫–Ω–æ–ø–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤
def create_buttons_masters(list_of_masters):
    markup = types.InlineKeyboardMarkup(row_width=1)  
    for name_master in list_of_masters:
        button = types.InlineKeyboardButton(name_master, callback_data=f'name_master:{name_master}')
        markup.add(button)
    return markup

def show_client_services(chat_id, c_id, index=None, message_id=None):
    services = db.get_client_services(c_id)
    
    if not services:
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return

    if index is None:
        index = len(services) - 1
    else:
        index = min(len(services) - 1, max(0, index))

    service = services[index]
    message_text = (f"*–ü—Ä–æ—Ñ–∏–ª—å: {service[0]}*\n\n"
                    f"üîî –î–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∏—Å–∏: üîî\n\n"
                    f"üìÜ –î–∞—Ç–∞: {service[1]}\n"
                    f"üïê –í—Ä–µ–º—è: {service[2]}\n"
                    f"üìå –ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {service[3]}\n"
                    f"üë§ –ú–∞—Å—Ç–µ—Ä: {service[4]}\n\n"
                    f"_–°—Ç—Ä–∞–Ω–∏—Ü–∞ {len(services) - index}/{len(services)}_"
                    )
    
    reply_markup = types.InlineKeyboardMarkup()
    if botcalendar.calendar1.is_event_within_24_hours(botcalendar.calen, service[1], service[2], service[4]):
       
        reply_markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f'delete,{service[1]},{service[2]},{service[4]},{service[5]}'))
    if index < len(services) - 1:
        reply_markup.add(types.InlineKeyboardButton("<< –ù–∞–∑–∞–¥", callback_data=f'previous:{c_id}:{index+1}'))
    if index > 0:
        reply_markup.add(types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ >>", callback_data=f'next:{c_id}:{index-1}'))

    if message_id:
        bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=message_text, reply_markup=reply_markup, parse_mode="Markdown")
    else:
        bot.send_message(chat_id, message_text, reply_markup=reply_markup, parse_mode="Markdown")


def startm1(m):
    calendar, step = DetailedTelegramCalendar(calendar_id=3,locale='ru',min_date=date.today()).build()
    bot.send_message(m.chat.id,
                     f"–í—ã–±–µ—Ä–∏—Ç–µ",
                     reply_markup=calendar)

@bot.callback_query_handler(func=DetailedTelegramCalendar.func(calendar_id=3))
def cal(c):
    user_id = c.message.chat.id
    user_info = get_user_data(user_id)
    result, key, step = DetailedTelegramCalendar(calendar_id=3, locale='ru', min_date=date.today()).process(c.data)
    if not result and key:
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ",
                              c.message.chat.id,
                              c.message.message_id,
                              reply_markup=key)
    if result:
        bot.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {result}",
                              c.message.chat.id,
                              c.message.message_id)
        
        user_info['zanyat_rez'] = result
        markup = types.InlineKeyboardMarkup()
        btn22 = types.InlineKeyboardButton("–î–∞",callback_data='da_zanyat')
        btn23 = types.InlineKeyboardButton("–ù–µ—Ç",callback_data='net_zanyat')
        markup.add(btn22,btn23)
        bot.send_message(c.message.chat.id, text=f'–û—Ç–º–µ—Ç–∏—Ç—å –≤–µ—Å—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–π?', reply_markup=markup)
     

#—Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    user_info = get_user_data(user_id)
    user_info['appointment_details']['user_nik'] = message.from_user.username or "–Ω–µ—Ç—É –Ω–∏–∫–∞"
    user_info['appointment_details']['user_id'] = user_id
   
    markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    btn1 = types.KeyboardButton("üìç–ü—Ä–æ—Ñ–∏–ª—åüìç")
    btn22 = types.KeyboardButton("üëã–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–ºüëã")

    task_thread = threading.Thread(target=periodic_task_master, args=(user_id,))
    task_thread.daemon = True
    task_thread.start()
    task_thread = threading.Thread(target=periodic_task, args=(user_id,))
    task_thread.daemon = True
    task_thread.start()
    if user_id == 288775517:
        btn24 = types.KeyboardButton("üíª–ö–∞–±–∏–Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç–∞—Ç–æ—Ä–∞üíª")
        markup1.add(btn24)
    if db.master_exists((int(message.from_user.id))):
        btn12 = types.KeyboardButton("üñä–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –º–∞—Å—Ç–µ—Ä–∞üñä")
        markup1.add(btn12, btn1, btn22)  
    else:
        markup1.add(btn1, btn22)

    bot.send_message(message.chat.id, text="* –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {0.first_name}!*\n\n‚Ä¢–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É \n*üëã–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–ºüëã*.\n\n‚Ä¢–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–µ—â–µ–Ω–∏–π –∏–ª–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É *üìç–ü—Ä–æ—Ñ–∏–ª—åüìç* \n\n ‚ùó ‚†Ä–í–∞–∂–Ω–æ‚†Ä‚ùó \n–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ üéõ –∫–≤–∞–¥—Ä–∞—Ç–∏–∫ —Å —á–µ—Ç—ã—Ä–º—è —Ç–æ—á–∫–∞–º–∏ (–æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—è–¥–æ–º —Å –≤—ã–±–æ—Ä–æ–º —ç–º–æ–¥–∑–∏ üôÇ –≤ —Å—Ç—Ä–æ–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π)".format(
        message.from_user), reply_markup=markup1, parse_mode="Markdown")


#—Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ 
@bot.message_handler(content_types=['text'])
def func(message):
    
    user_id = message.from_user.id
    user_info = get_user_data(user_id)
    user_info['appointment_details']['user_nik'] = message.from_user.username or "–Ω–µ—Ç—É –Ω–∏–∫–∞"
    user_info['appointment_details']['user_id'] = user_id


    if (message.text =='üíª–ö–∞–±–∏–Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç–∞—Ç–æ—Ä–∞üíª'):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π")
        button4=types.KeyboardButton("–í –º–µ–Ω—é")
        markup.add(btn1)
        markup.add(button4)
        bot.send_message(message.chat.id, text=f'–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=markup)

    if (message.text =='–ü–æ–ª—É—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π'):
        admin_data = db.get_admin_data()
        admin_data.to_csv('admin_data.csv', index=False)
        with open('admin_data.csv', 'r', encoding='utf-8') as file:
            bot.send_document(message.chat.id, file) 
   
    if (message.text =='–í –º–µ–Ω—é'):

        markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton("üìç–ü—Ä–æ—Ñ–∏–ª—åüìç")
        btn22 = types.KeyboardButton("üëã–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–ºüëã")
       
        if user_id == 288775517:
            btn24 = types.KeyboardButton("üíª–ö–∞–±–∏–Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç–∞—Ç–æ—Ä–∞üíª")
            markup1.add(btn24)
        if db.master_exists((int(message.from_user.id))):
            btn12 = types.KeyboardButton("üñä–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –º–∞—Å—Ç–µ—Ä–∞üñä")
            markup1.add(btn12, btn1, btn22)  
        else:
            markup1.add(btn1, btn22)

        bot.send_message(message.chat.id, text="* –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {0.first_name}!*\n\n‚Ä¢–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É \n*üëã–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–ºüëã*.\n\n‚Ä¢–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–µ—â–µ–Ω–∏–π –∏–ª–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É *üìç–ü—Ä–æ—Ñ–∏–ª—åüìç* \n\n ‚ùó ‚†Ä–í–∞–∂–Ω–æ‚†Ä‚ùó \n–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ üéõ –∫–≤–∞–¥—Ä–∞—Ç–∏–∫ —Å —á–µ—Ç—ã—Ä–º—è —Ç–æ—á–∫–∞–º–∏ (–æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—è–¥–æ–º —Å –≤—ã–±–æ—Ä–æ–º —ç–º–æ–¥–∑–∏ üôÇ –≤ —Å—Ç—Ä–æ–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π)".format(
        message.from_user), reply_markup=markup1, parse_mode="Markdown")


    
    if (message.text == "üñä–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –º–∞—Å—Ç–µ—Ä–∞üñä") or (message.text == "–ù–∞–∑–∞–¥") and db.master_exists(int(user_info['appointment_details']['user_id'])):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        chat_id = message.chat.id

        button1 = types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏")
        button2 = types.KeyboardButton("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã")
        button4=types.KeyboardButton("–í –º–µ–Ω—é")
        markup.add(button1, button2)
        markup.add(button4)

        bot.send_message(chat_id, text=f'–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –º–∞—Å—Ç–µ—Ä–∞ {db.get_master_name(int(message.from_user.id))}', reply_markup=markup)
    
    if (message.text =="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏"):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
            chat_id = message.chat.id    
            button1 = types.KeyboardButton("–ó–∞ –≥–æ–¥")
            button2 = types.KeyboardButton("–ó–∞ –º–µ—Å—è—Ü")
            button3 = types.KeyboardButton("–ó–∞ –¥–µ–Ω—å")
            button4=types.KeyboardButton("–ù–∞–∑–∞–¥")
            markup.add(button1, button2,button3)
            markup.add(button4)

            bot.send_message(chat_id, text=f'–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –º–∞—Å—Ç–µ—Ä–∞ {db.get_master_name(int(message.from_user.id))}', reply_markup=markup)
    
    if (message.text =="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã"):

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        button1 = types.KeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã")      
        chat_id = message.chat.id  
        button4=types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(button1)
        markup.add(button4)

        bot.send_message(chat_id, text=f'–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –º–∞—Å—Ç–µ—Ä–∞ {db.get_master_name(int(message.from_user.id))}', reply_markup=markup)
    
    if message.text =='–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã':
        
        startm1(message)
  
    if message.text == "–ó–∞ –≥–æ–¥":
        user_info['mas_month'] = False
        user_info['mas_day']=False
        user_info['mas_year'] = True    
        startm(message)


    elif message.text == "–ó–∞ –º–µ—Å—è—Ü":
        user_info['mas_month'] = True
        user_info['mas_day']=False
        user_info['mas_year'] = False 
        startm(message)

    elif message.text == "–ó–∞ –¥–µ–Ω—å":
        user_info['mas_month'] = False
        user_info['mas_day']=True 
        user_info['mas_year'] = False 
        startm(message)
            
    if (message.text =="üìç–ü—Ä–æ—Ñ–∏–ª—åüìç"):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
            chat_id = message.chat.id
            btn22 = types.KeyboardButton("–ì–¥–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è?")
            btn23 = types.KeyboardButton("–ú–æ–∏ –∑–∞–ø–∏—Å–∏")
            button4=types.KeyboardButton("–í –º–µ–Ω—é")
            markup.add(btn22,btn23)
            markup.add(button4)
            bot.send_message(chat_id, text=f'–ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞', reply_markup=markup)

    if (message.text =="–ú–æ–∏ –∑–∞–ø–∏—Å–∏"):
            chat_id = message.chat.id
            user_id = message.from_user.id 
            bot.send_message(chat_id, text=f'–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "*–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å*". \n–ï—Å–ª–∏ –¥–æ –∑–∞–ø–∏—Å–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤, —Ç–æ –∫–Ω–æ–ø–∫–∏ –Ω–µ –±—É–¥–µ—Ç.',  parse_mode="Markdown") 
            show_client_services(chat_id, user_id)  

    if(message.text == "–ì–¥–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è?"):
        chat_id = message.chat.id
        media_group = []
        with open(f'C:/Users/Professional/Desktop/diploma/photo_masters/adres2.jpg', 'rb') as photo:
                        photo_content = photo.read()
                        media_group.append(types.InputMediaPhoto(media=photo_content))
        bot.send_media_group(chat_id, media_group)
        bot.send_message(chat_id, text=f'–ù–∞—à –∞–¥—Ä–µ—Å: –°–æ–≤–µ—Ç—Å–∫–∞—è 18, 9 —ç—Ç–∞–∂, 903 –∫–∞–±–∏–Ω–µ—Ç')

    if(message.text == "üëã–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–ºüëã"):
        user_info['masterm'] = False
        user_info['datem'] = False
        user_info['datem'] = False
        
        user_info['appointment_details']['master'] = ''
        user_info['appointment_details']['data'] = ''
        user_info['appointment_details']['time_service'] = ''
        user_info['appointment_details']['selected_time'] = ''
        user_info['appointment_details']['service'] = ''
        user_info['kx']=1
        menu(message.chat.id,user_id )   
         

    

@bot.callback_query_handler(func=lambda callback: True)
       
def callback_handler(callback):

   


    user_id = callback.message.chat.id
    chat_id = callback.message.chat.id
    user_info = get_user_data(user_id)

    if callback.data.startswith('delete,'):
        
        reply_markup = types.InlineKeyboardMarkup()
        message_id = callback.message.message_id
        selected_time = user_info['appointment_details']['selected_time']
        data =callback.data.split(',')
        db.delete_service_by_id(data[4])
        date=data[1]
        time=data[2]
        description=data[3]
        event_id=botcalendar.calendar1.get_events_id(botcalendar.calen, date, time, description)
        if botcalendar.calendar1.delete_event(botcalendar.calen, event_id):
           bot.edit_message_text(chat_id=callback.message.chat.id, message_id=message_id,text= "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞",reply_markup=reply_markup) 
    
    if callback.data.startswith('previous:') or callback.data.startswith('next:'):
        message_id = callback.message.message_id
        data =callback.data.split(':')
        direction = data[0]
        c_id = int(data[1])
        index = int(data[2])
        services = db.get_client_services(callback.message.from_user.id)

        if direction == 'previous':
            if index < len(services) - 1:
                  show_client_services(callback.message.chat.id, c_id, index, message_id)
            else:
                show_client_services(callback.message.chat.id, c_id, index, message_id)
        elif direction == 'next':
            if index > 0:
                show_client_services(callback.message.chat.id, c_id, index, message_id)
            else:
                show_client_services(callback.message.chat.id, c_id, index, message_id)
    
    if callback.data == 'da_zanyat':
        reply_markup = types.InlineKeyboardMarkup()
        message_id = callback.message.message_id
        botcalendar.calendar1.create_event(botcalendar.calen,f"–≤—ã—Ö–æ–¥–Ω–æ–π:{db.get_master_name(user_info['appointment_details']['user_id'])}", db.get_master_name(user_info['appointment_details']['user_id']),user_info['zanyat_rez'],user_info['zanyat_rez'],'00:00', '23:59', names_to_numbers.get(db.get_master_name(callback.message.chat.id)))
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=message_id,text= f"–í–µ—Å—å {user_info['zanyat_rez']} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–π",reply_markup=reply_markup) 
    
    if  callback.data == 'net_zanyat':
        reply_markup = types.InlineKeyboardMarkup()
        message_id = callback.message.message_id
        reply_markup=start_create_buttons_for_master()
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=message_id,text= f"–í—ã–±–µ—Ä–µ—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–æ–≥–æ —Å–ª–æ—Ç–∞ ",reply_markup=reply_markup) 
    
    if callback.data.startswith('start_selected_time_master:'):
        user_info['selected_time_slot_start'] = callback.data.replace('start_selected_time_master:', '')  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç
        message_id = callback.message.message_id
        reply_markup = types.InlineKeyboardMarkup()
        reply_markup=end_create_buttons_for_master()
        bot.send_message(callback.message.chat.id, f"–í—ã–±–µ—Ä–µ—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–Ω—è—Ç–æ–≥–æ —Å–ª–æ—Ç–∞",reply_markup=reply_markup)

    if callback.data.startswith('end_selected_time_master:'):
        markup = types.InlineKeyboardMarkup()  
        user_info['selected_time_slot_end'] = callback.data.replace('end_selected_time_master:', '')  
        message_id = callback.message.message_id
        btn1 = types.InlineKeyboardButton("–î–∞", callback_data='da_master_select')
        btn2 = types.InlineKeyboardButton("–ù–µ—Ç", callback_data='net_zanyat')
        markup.add(btn1,btn2)

        bot.edit_message_text(chat_id=callback.message.chat.id,message_id=message_id, text=f"–î–∞—Ç–∞:{user_info['zanyat_rez']}\n –ù–∞—á–∞–ª–æ:{user_info['selected_time_slot_start']}\n –ö–æ–Ω–µ—Ü:{user_info['selected_time_slot_end']}\n–í—Å–µ –≤–µ—Ä–Ω–æ?",reply_markup=markup)
    
    if callback.data == 'da_master_select':
        reply_markup = types.InlineKeyboardMarkup()
        message_id = callback.message.message_id
        botcalendar.calendar1.create_event(botcalendar.calen,f"–≤—ã—Ö–æ–¥–Ω–æ–π:{db.get_master_name(user_info['appointment_details']['user_id'])}", db.get_master_name(user_info['appointment_details']['user_id']),user_info['zanyat_rez'],user_info['zanyat_rez'],user_info['selected_time_slot_start'], user_info['selected_time_slot_end'], names_to_numbers.get(db.get_master_name(callback.message.chat.id)))
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=message_id,text= f"–°–ª–æ—Ç {user_info['zanyat_rez']} c {user_info['selected_time_slot_start']} –¥–æ {user_info['selected_time_slot_end']} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–π",reply_markup=reply_markup) 
    
    if callback.data.startswith('selected_time:'):
        user_info['datem'] = True
        selected_time_slot = callback.data.replace('selected_time:', '')  
        bot.send_message(callback.message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {user_info['rez']} - {selected_time_slot}")
        user_info['appointment_details']['selected_time'] = selected_time_slot
        user_info['appointment_details']['data'] = user_info['rez']
        menu(chat_id,user_id)


        
    #–Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–µ—Ä–∞ 
    if callback.data == 'master':
        user_info['masterm'] = False
        user_info['key_master'] = False
        chat_id = callback.message.chat.id
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

        bot.send_message(chat_id, '–ù–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞:')

        if  user_info['datem']:
            data_my =  user_info['appointment_details']['data']
            time_my =  user_info['appointment_details']['selected_time']
            new_time_my=time_my

            if user_info['servicem']:
                minutes =  user_info['appointment_details']['time_service']         
                current_hours, current_minutes = map(int, time_my.split(':'))
                new_minutes = current_minutes + (int(minutes)-1)
                new_hours = current_hours + new_minutes // 60
                new_minutes %= 60
                new_time_my = '{:02d}:{:02d}'.format(new_hours, new_minutes)

            target_datetime = f'{data_my}T{time_my}:00+07:00'    
            end_date=f'{data_my}T{ new_time_my}:00+07:00' 
            available_masters = []
            busy_descriptions =botcalendar.calendar1.get_busy_descriptions(botcalendar.calen, target_datetime,end_date)
            
            for master in all_target_descriptions:
                if master not in busy_descriptions:
                    available_masters.append(master)
           
            if available_masters:
                markup=create_buttons_masters(available_masters)    
                media_group = []
                for master in available_masters:
                    with open(f'C:/Users/Professional/Desktop/diploma/photo_masters/{master}.jpg', 'rb') as photo:
                        photo_content = photo.read()
                        media_group.append(types.InputMediaPhoto(media=photo_content))
                bot.send_media_group(chat_id, media_group)
                bot.send_message(chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞", reply_markup=markup)
            else:
                bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Å–µ –º–∞—Å—Ç–µ—Ä–∞ –∑–∞–Ω—è—Ç—ã –≤ —ç—Ç–æ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ —É—Å–ª—É–≥—É.")
                user_info['key_master'] = True
                
        else:
            markup=create_buttons_masters(all_target_descriptions)
            media_group = []
            for master in all_target_descriptions:
                    with open(f'C:/Users/Professional/Desktop/diploma/photo_masters/{master}.jpg', 'rb') as photo:
                        photo_content = photo.read()
                        media_group.append(types.InputMediaPhoto(media=photo_content))
            bot.send_media_group(chat_id, media_group)
            bot.send_message(chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞", reply_markup=markup)

        if user_info['key_master']:     
            markup = types.InlineKeyboardMarkup()           
            btn22 = types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è",callback_data='date')
            markup.add(btn22)
            btn23 = types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É",callback_data='service')
            markup.add(btn23)
            bot.send_message(
                            chat_id, text=("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Ç—Å–≤–∏–µ –Ω–∏–∂–µ üëá"), reply_markup=markup)
    #–≤—ã–±—Ä–∞–ª–∏ –º–∞—Å—Ç–µ—Ä–∞
    if callback.data.startswith('name_master:'):
        chat_id = callback.message.chat.id
        name_master = callback.data.replace('name_master:', '')  
        bot.send_message(callback.message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {name_master}")
        user_info['masterm'] = True
        user_info['appointment_details']['master'] = name_master
        menu(chat_id,user_id ) 
        
    #–Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–∞—Ç—ã   
    if callback.data == 'date':
        user_info['rez']=None
        user_info['msg']=None
        user_info['b']=None
        user_info['a']=None
        user_info['datem'] = False
        user_info['appointment_details']['selected_time'] =""
        user_info['appointment_details']['data'] =""
        start_calendar(callback.message)
            
    #–Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É
    if callback.data == 'service':
        user_info['servicem']=False
        chat_id = callback.message.chat.id
        bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É')
        if user_info['datem'] == True and user_info['masterm']:
            master_name = user_info['appointment_details']['master']
            data_my =  user_info['appointment_details']['data']
            time_my = user_info['appointment_details']['selected_time']
            with open('dataservice.txt', 'r', encoding='utf-8') as file:
                services_data = file.readlines()    
            services = ''
            minutes = 0
            price = 0
            markup = types.InlineKeyboardMarkup(row_width=1)
            for line in services_data:
                service, minutes,price = line.strip().split(':')
                services=service.strip()
                services=services.replace("+", "")
                current_hours, current_minutes = map(int, time_my.split(':'))
                new_minutes = current_minutes + (int(minutes)-1)
                new_hours = current_hours + new_minutes // 60
                new_minutes %= 60
                new_time_end = '{:02d}:{:02d}'.format(new_hours, new_minutes)
                current_date_str = data_my.strftime('%Y-%m-%d')   
                if int(minutes) >= 60:
                    hours = int(minutes) // 60
                    remaining_minutes = int(minutes) % 60
                    if remaining_minutes > 0:
                        formatted_time = f"{hours:01d}—á {remaining_minutes:02d}–º–∏–Ω"
                    else:
                        formatted_time = f"{hours:01d}—á"
                else:
                    formatted_time = f"{minutes}–º–∏–Ω"
                if  botcalendar.calendar1.check_slot_availability(botcalendar.calen, master_name,  current_date_str, time_my, new_time_end):
                    buttons = types.InlineKeyboardButton(f"{service} {formatted_time} {price}‚ÇΩ", callback_data=f"{services}") 
                    markup.add(buttons)
        if user_info['datem']==False or user_info['masterm']==False:
            with open('dataservice.txt', 'r', encoding='utf-8') as file:
                services_data = file.readlines()              
            services = ''
            minutes = 0
            price = 0
            markup = types.InlineKeyboardMarkup(row_width=1)
            for line in services_data:
                service, minutes,price = line.strip().split(':')
                services=service.strip()
                services=services.replace("+", "")
                if int(minutes) >= 60:
                    hours = int(minutes) // 60
                    remaining_minutes = int(minutes) % 60
                    if remaining_minutes > 0:
                        formatted_time = f"{hours:01d}—á {remaining_minutes:02d}–º–∏–Ω"
                    else:
                        formatted_time = f"{hours:01d}—á"
                else:
                    formatted_time = f"{minutes}–º–∏–Ω"
                buttons = types.InlineKeyboardButton(f"{service} {formatted_time} ({price}‚ÇΩ)", callback_data=f"{services}")  
                markup.add(buttons) 
        bot.send_message(chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá", reply_markup=markup)

        
#–≤—ã–±—Ä–∞–ª–∏ —É—Å–ª—É–≥—É
    if callback.data in ['–°—Ç—Ä–∏–∂–∫–∞', '–î–µ—Ç—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞', '–°—Ç—Ä–∏–∂–∫–∞ –º–∞—à–∏–Ω–∫–æ–π', '–£–∫–ª–∞–¥–∫–∞', '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –±–æ—Ä–æ–¥—ã –∏ —É—Å–æ–≤', '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –±–æ—Ä–æ–¥—ã', '–°—Ç—Ä–∏–∂–∫–∞–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –±–æ—Ä–æ–¥—ã', '–°—Ç—Ä–∏–∂–∫–∞ –º–∞—à–∏–Ω–∫–æ–π–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –±–æ—Ä–æ–¥—ã', '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —É—Å–æ–≤','–°—Ç—Ä–∏–∂–∫–∞ (–æ—Ç–µ—Ü –∏ —Å—ã–Ω)']:
        user_info['servicem'] = True
        chat_id = callback.message.chat.id
        markup = types.InlineKeyboardMarkup()
        data_to_write = ''
        service=callback.data
        with open('dataservice.txt', 'r', encoding='utf-8') as file:
         lines = file.readlines()
        for line in lines:
             if callback.data == line.split(':')[0].strip():  # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —É—Å–ª—É–≥–∏
                data_to_write = line.split(':')[1].strip()
        user_info['appointment_details']['service'] = service
        user_info['appointment_details']['time_service']=data_to_write
        bot.send_message(chat_id, f'–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞: {callback.data}', reply_markup=markup)
        menu( chat_id,user_id )
 
#–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö

    if user_info['masterm'] == True and user_info['datem']==True and user_info['servicem'] ==True and (user_info['kx'] != 0):
        chat_id = callback.message.chat.id
        markup = types.InlineKeyboardMarkup()
        data_my = user_info['appointment_details']['data']
        current_date_str = data_my.strftime('%Y-%m-%d')
        month_day =current_date_str[5:]    
        time_my = user_info['appointment_details']['selected_time']          
        service_me = user_info['appointment_details']['service']      
        master_my = user_info['appointment_details']['master']
        message_text = f"–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ\n –î–∞—Ç–∞: {month_day}\n –í—Ä–µ–º—è: {time_my}\n –£—Å–ª—É–≥–∞: {service_me}\n –ú–∞—Å—Ç–µ—Ä: {master_my}\n–í—Å–µ –≤–µ—Ä–Ω–æ?\n"
        reply_markup = types.InlineKeyboardMarkup([[types.InlineKeyboardButton("–î–∞", callback_data='yes'), types.InlineKeyboardButton("–ù–µ—Ç", callback_data='no')]])  
        bot.send_message(chat_id, message_text, reply_markup=reply_markup)
        
        user_info['kx'] = 0 

    
    if callback.data == 'yes':
        if db.client_exists(int(user_info['appointment_details']['user_id'])) == False:
            msg = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é.")
            bot.register_next_step_handler(msg, process_name_step)
            
        else:
            selected_time = user_info['appointment_details']['selected_time']
            time_service_minutes = int(user_info['appointment_details']['time_service']) 
            time_format = "%H:%M"
            selected_time_dt = datetime.strptime(selected_time, time_format)
            time_service_delta = timedelta(minutes=time_service_minutes)
            new_time_dt = selected_time_dt + time_service_delta
            start_datetime = f"{selected_time_dt.strftime('%H:%M')}"
            end_datetime = f"{new_time_dt.strftime('%H:%M')}"
            
            name_client_know=db.get_client_name(int(user_info['appointment_details']['user_id']))
            if botcalendar.calendar1.is_slot_available(botcalendar.calen, user_info['appointment_details']['data'], start_datetime, end_datetime, user_info['appointment_details']['master']):
                 message_text = f"–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤–∞–º–∏ –≤—Ä–µ–º—è —É–∂–µ –∫—Ç–æ-—Ç–æ –∑–∞–ø–∏—Å–∞–ª—Å—è, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞ü•∫"
                 reply_markup = types.InlineKeyboardMarkup([[ types.InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data='no')]])
                 bot.send_message(chat_id, message_text, reply_markup=reply_markup)
           
            else:
                master_id = db.get_master_id(user_info['appointment_details']['master'])
                botcalendar.calendar1.create_event(botcalendar.calen,name_client_know, user_info['appointment_details']['master'],user_info['appointment_details']['data'],user_info['appointment_details']['data'],start_datetime, end_datetime, names_to_numbers.get(user_info['appointment_details']['master']))
            
                db.add_service(int(user_info['appointment_details']['user_id']),master_id,user_info['appointment_details']['service'] ,str(user_info['appointment_details']['data']),str(user_info['appointment_details']['selected_time']))
                bot.send_message(chat_id, f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã. –ú—ã –≤–∞—Å –∂–¥–µ–º üòä\n\n –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É *üìç–ü—Ä–æ—Ñ–∏–ª—åüìç* ‚û° *–ú–æ–∏ –∑–∞–∏–ø–∏—Å–∏* \n\n ‚ùó ‚†Ä–í–∞–∂–Ω–æ‚†Ä‚ùó \n–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∑–∞ 24 —á–∞—Å–∞! ', reply_markup=types.InlineKeyboardMarkup(), parse_mode="Markdown")
    
    if callback.data == 'no':
        user_info['kx'] = 1
        markup = types.InlineKeyboardMarkup()
        btn21 = types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞",callback_data='master')
        btn22 = types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è",callback_data='date')
        btn23 = types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É",callback_data='service')

        markup.row(btn21)
        markup.row(btn22)
        markup.row(btn23)

        bot.send_message(
        chat_id, text=("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Ç—Å–≤–∏–µ –Ω–∏–∂–µ üëá"), reply_markup=markup)
        
    if callback.data =='confirm':
            
            selected_time = user_info['appointment_details']['selected_time']
            time_service_minutes = int(user_info['appointment_details']['time_service'])
            time_format = "%H:%M"
            selected_time_dt = datetime.strptime(selected_time, time_format)
            time_service_delta = timedelta(minutes=time_service_minutes)
            new_time_dt = selected_time_dt + time_service_delta
            start_datetime = f"{selected_time_dt.strftime('%H:%M')}"
            end_datetime = f"{new_time_dt.strftime('%H:%M')}"
            master_id = db.get_master_id(user_info['appointment_details']['master'])
            
            if botcalendar.calendar1.is_slot_available(botcalendar.calen, user_info['appointment_details']['data'], start_datetime, end_datetime, user_info['appointment_details']['master']):
                 message_text = f"–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤–∞–º–∏ –≤—Ä–µ–º—è —É–∂–µ –∫—Ç–æ-—Ç–æ –∑–∞–ø–∏—Å–∞–ª—Å—è, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞ü•∫"
                 reply_markup = types.InlineKeyboardMarkup([[ types.InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data='no')]])
                 bot.send_message(chat_id, message_text, reply_markup=reply_markup)
           
            else:
                botcalendar.calendar1.create_event(botcalendar.calen,user_info['name_client'], user_info['appointment_details']['master'],user_info['appointment_details']['data'],user_info['appointment_details']['data'],start_datetime, end_datetime, names_to_numbers.get(user_info['appointment_details']['master']))
                db.add_client(int(user_info['appointment_details']['user_id']),user_info['name_client'],user_info['phone_client'],user_info['appointment_details']['user_nik'] )
                db.add_service(int(user_info['appointment_details']['user_id']),master_id,user_info['appointment_details']['service'] ,str(user_info['appointment_details']['data']),str(user_info['appointment_details']['selected_time']))
                bot.send_message(chat_id, f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã. –ú—ã –≤–∞—Å –∂–¥–µ–º üòä\n\n –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É *üìç–ü—Ä–æ—Ñ–∏–ª—åüìç* ‚û° *–ú–æ–∏ –∑–∞–∏–ø–∏—Å–∏*   \n\n ‚ùó ‚†Ä–í–∞–∂–Ω–æ‚†Ä‚ùó \n–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∑–∞ 24 —á–∞—Å–∞! ', reply_markup=types.InlineKeyboardMarkup(), parse_mode="Markdown")
         
    if callback.data == 'confirm_zapis':
        message_id = callback.message.message_id
        reply_markup = types.InlineKeyboardMarkup()
        bot.edit_message_text(chat_id=user_info['appointment_details']['user_id'], message_id=message_id, text=f"–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞‚úÖ ",reply_markup=reply_markup)
    if callback.data == 'cancel':
        message_id = callback.message.message_id
        reply_markup = types.InlineKeyboardMarkup([
                        [types.InlineKeyboardButton("–î–∞", callback_data='cancel_zapis'), 
                         types.InlineKeyboardButton("–ù–µ—Ç", callback_data='cancel_no')]
                    ])
        bot.edit_message_text(chat_id=user_info['appointment_details']['user_id'], message_id=message_id, text=f"–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å?",reply_markup=reply_markup)
    if callback.data == 'cancel_no':
        message_id = callback.message.message_id
        reply_markup = types.InlineKeyboardMarkup([
                        [types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm_zapis'), 
                         types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data='cancel')]
                    ])
       
        bot.edit_message_text(chat_id=user_info['appointment_details']['user_id'], message_id=message_id, text=f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞–ø–∏—Å—å?",reply_markup=reply_markup)

    if callback.data == 'cancel_zapis':
        reply_markup = types.InlineKeyboardMarkup()
        
        message_id = callback.message.message_id
        index=None
        if index is None:
            index = len(user_info['times']) - 1
        else:
            index = min(len(user_info['times']) - 1, max(0, index))
        timess=user_info['times'][index]
        db.delete_service_by_id(timess[2])
        description=db.get_master_name(timess[4])
        event_id=botcalendar.calendar1.get_events_id(botcalendar.calen, timess[0], timess[1], description)
        if botcalendar.calendar1.delete_event(botcalendar.calen, event_id):
           bot.edit_message_text(chat_id=callback.message.chat.id, message_id=message_id,text= "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞",reply_markup=reply_markup) 

def process_name_step(message):

    user_id = message.from_user.id
    user_info = get_user_data(user_id)
    user_info['name_client'] = message.text
    msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
    bot.register_next_step_handler(msg, process_phone_step)

def process_phone_step(message):
    user_id = message.from_user.id
    user_info = get_user_data(user_id)
    user_info['phone_client'] = message.text
    client_info_text = f"–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è: {user_info['name_client']}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_info['phone_client']}\n–í—Å–µ –≤–µ—Ä–Ω–æ?"
    reply_markup = types.InlineKeyboardMarkup([[types.InlineKeyboardButton("–î–∞", callback_data='confirm'), types.InlineKeyboardButton("–ù–µ—Ç", callback_data='yes')]])
    bot.send_message(message.chat.id, client_info_text, reply_markup=reply_markup)

import time
def periodic_task(message):
    user_info = get_user_data(message)
    reply_markup = types.InlineKeyboardMarkup()
    index=None
    while True:
        client_id= user_info['appointment_details']['user_id']
        if client_id:
            new_times = db.get_appointments_24h_or_more(client_id)
            if new_times:
                if new_times != user_info['times']:
                    user_info['times'] = db.get_appointments_24h_or_more(client_id)
                    if index is None:
                        index = len(user_info['times']) - 1
                    else:
                        index = min(len(user_info['times']) - 1, max(0, index))
                    timess=user_info['times'][index]
                    full_date=timess[0]
                    short_date = full_date[5:]
                    reply_markup = types.InlineKeyboardMarkup([
                        [types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm_zapis'), 
                         types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data='cancel')]
                    ])
       
                    bot.send_message(chat_id=user_info['appointment_details']['user_id'], text=f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –≤—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∫ –Ω–∞–º {short_date} –≤ {timess[1]} –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É \"{timess[3]}\"",reply_markup=reply_markup)
        time.sleep(10)

def periodic_task_master(message):
    reply_markup = types.InlineKeyboardMarkup()
    cleints=[]
    index=None
    user_info = get_user_data(message)
    while True:
        if db.master_exists((int(message))):
                cleints = db.get_last_client_service(int(message))
                if cleints:
                    if cleints != user_info['new_client']:
                        user_info['new_client'] = db.get_last_client_service(int(message))

                        if index is None:
                            index = len(cleints) - 1
                            print (index)
                        else:
                            index = min(len(cleints) - 1, max(0, index))
                            print (index)
                        cleints[index]
                        
                        full_date=user_info['new_client'][1]
                        short_date = full_date[5:]
                        reply_markup = types.InlineKeyboardMarkup()
                        
                        bot.send_message(chat_id=message, text=f"–£ –≤–∞—Å –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å \n–ò–º—è: {cleints[0]} \n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {short_date}-{cleints[2]}\n–£—Å–ª—É–≥–∞: {cleints[3]}  ",reply_markup=reply_markup)
        time.sleep(10)

if __name__ == '__main__': 
    try:
        telegram.request.HTTPXRequest(proxy='http://127.0.0.1:3128')
        bot.polling(none_stop=True) 
    except Exception as e:
        print(e)